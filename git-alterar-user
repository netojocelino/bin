#!/bin/bash

set -eu

#
# Utilitários
#
C_BOLD=1
C_H1='1;32'
C_H2='1;34'
C_OK='30;42'
C_ERROR='97;41'

S_CANCELAMENTO_PADRAO='Ação cancelada pelo usuário'

color () {
    printf '\033[%sm%s\033[0m' "$1" "$2"
}
echoH1 () {
    echo "$(color "$C_H1" '==>') $(color "$C_BOLD" "$1")"
}
echoH2 () {
    echo "  $(color "$C_H2" '->') $(color "$C_BOLD" "$1")"
}
echoOK () {
    echo "$(color "$C_OK" ' OK ') "$1""
}
error () {
    >&2 echo "$(color "$C_ERROR" ' ERROR ') $2"
    exit "$1"
}

question () {
	read -n 1 -p "$1" quest_res
	echo

	if [[ "$quest_res" = 'n' || "$quest_res" = 'N' ]]; then
		error 2 "$2"
	fi
}


error 0 "Programa não está executando corretamente"

[ $# -eq 3 ] || error 1 "Argumentos 'nome' 'email_antigo' 'email_novo' são obrigatórios."


# question "'n' para cancelar: " "Sobreescrita cancelada pelo usuário"

echoH1 "Confirme os dados antes de prosseguir:"
echoH2 "$(color "$C_BOLD" "Nome de Author") → $(color "$C_BOLD" "$1")"
echoH2 "$(color "$C_BOLD" "Email antigo") → $(color "$C_BOLD" "$2")"
echoH2 "$(color "$C_BOLD" "Novo email") → $(color "$C_BOLD" "$3")"

question "'n' para cancelar: " "$S_CANCELAMENTO_PADRAO"

echoH1 "Aguarde a alteração do Autor para o email '$2' para '$3' em todos os commits"



git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "$2" ];
        then
                export GIT_COMMITTER_NAME="$1"
                export GIT_AUTHOR_EMAIL="$2";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD




echoOK "Commits alterados com sucesso!"


